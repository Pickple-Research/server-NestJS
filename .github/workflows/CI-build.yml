name: CI-build

# workflow를 트리거시키는 행위를 지정합니다.
on:
  # main 브랜치에 push 혹은 pull_request 가 일어났을 때 자동 실행됩니다.
  pull_request:
    branches: [main]

  # 수동으로도 workflow를 트리거할 수 있도록 설정합니다.
  workflow_dispatch:

# 수행할 하나 이상의 job들을 설정합니다. 기본적으로 병렬 실행됩니다. (순차 시행되도록 바꿀 수도 있습니다)
jobs:
  # build라는 이름의 job을 정의합니다.
  build:
    # job이 동작할 환경을 설정합니다: 최신 버전 우분투
    runs-on: ubuntu-latest

    # job이 수행할 실제 동작들을 설정합니다. 순차적으로 실행됩니다.
    steps:
      # 레포지토리 환경을 runner로 복사합니다.
      - name: checkout
        uses: actions/checkout@v2

      # yarn 을 캐싱합니다.
      # 링크 참조: https://dev.to/mpocock1/how-to-cache-nodemodules-in-github-actions-with-yarn-24eh
      # 링크 참조: https://github.com/actions/cache/blob/main/examples.md#node---yarn
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: yarn cache
        uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      # yarn을 사용해 의존성 모듈을 설치합니다.
      # 링크 참조: https://github.com/marketplace/actions/github-action-for-yarn
      - name: yarn install
        uses: borales/actions-yarn@v2.3.0
        with:
          cmd: install # 'yarn install' 명령어를 실행합니다.

      - name: check typescript grammar
        uses: borales/actions-yarn@v2.3.0
        with:
          cmd: tsc # 'yarn tsc' 명령어를 실행합니다.

      # yarn build 시도합니다.
      - name: yarn build
        uses: borales/actions-yarn@v2.3.0
        with:
          cmd: build # 'yarn build' 명령어를 실행합니다.
